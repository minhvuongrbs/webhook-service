// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	subscriber "github.com/minhvuongrbs/webhook-service/internal/entities/subscriber"
	webhook "github.com/minhvuongrbs/webhook-service/internal/entities/webhook"
)

// MockPartnerAdapter is a mock of PartnerAdapter interface.
type MockPartnerAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerAdapterMockRecorder
}

// MockPartnerAdapterMockRecorder is the mock recorder for MockPartnerAdapter.
type MockPartnerAdapterMockRecorder struct {
	mock *MockPartnerAdapter
}

// NewMockPartnerAdapter creates a new mock instance.
func NewMockPartnerAdapter(ctrl *gomock.Controller) *MockPartnerAdapter {
	mock := &MockPartnerAdapter{ctrl: ctrl}
	mock.recorder = &MockPartnerAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerAdapter) EXPECT() *MockPartnerAdapterMockRecorder {
	return m.recorder
}

// NotifyWebhookEvent mocks base method.
func (m *MockPartnerAdapter) NotifyWebhookEvent(ctx context.Context, w *webhook.Webhook, subscriberEvent subscriber.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyWebhookEvent", ctx, w, subscriberEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyWebhookEvent indicates an expected call of NotifyWebhookEvent.
func (mr *MockPartnerAdapterMockRecorder) NotifyWebhookEvent(ctx, w, subscriberEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyWebhookEvent", reflect.TypeOf((*MockPartnerAdapter)(nil).NotifyWebhookEvent), ctx, w, subscriberEvent)
}

// MockwebhookRepository is a mock of webhookRepository interface.
type MockwebhookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockwebhookRepositoryMockRecorder
}

// MockwebhookRepositoryMockRecorder is the mock recorder for MockwebhookRepository.
type MockwebhookRepositoryMockRecorder struct {
	mock *MockwebhookRepository
}

// NewMockwebhookRepository creates a new mock instance.
func NewMockwebhookRepository(ctrl *gomock.Controller) *MockwebhookRepository {
	mock := &MockwebhookRepository{ctrl: ctrl}
	mock.recorder = &MockwebhookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwebhookRepository) EXPECT() *MockwebhookRepositoryMockRecorder {
	return m.recorder
}

// GetWebhookById mocks base method.
func (m *MockwebhookRepository) GetWebhookById(ctx context.Context, webhookId string) (*webhook.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookById", ctx, webhookId)
	ret0, _ := ret[0].(*webhook.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookById indicates an expected call of GetWebhookById.
func (mr *MockwebhookRepositoryMockRecorder) GetWebhookById(ctx, webhookId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookById", reflect.TypeOf((*MockwebhookRepository)(nil).GetWebhookById), ctx, webhookId)
}

// MocktemporalAdapter is a mock of temporalAdapter interface.
type MocktemporalAdapter struct {
	ctrl     *gomock.Controller
	recorder *MocktemporalAdapterMockRecorder
}

// MocktemporalAdapterMockRecorder is the mock recorder for MocktemporalAdapter.
type MocktemporalAdapterMockRecorder struct {
	mock *MocktemporalAdapter
}

// NewMocktemporalAdapter creates a new mock instance.
func NewMocktemporalAdapter(ctrl *gomock.Controller) *MocktemporalAdapter {
	mock := &MocktemporalAdapter{ctrl: ctrl}
	mock.recorder = &MocktemporalAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktemporalAdapter) EXPECT() *MocktemporalAdapterMockRecorder {
	return m.recorder
}

// RegisterWorkflowNotifyEvent mocks base method.
func (m *MocktemporalAdapter) RegisterWorkflowNotifyEvent(ctx context.Context, e subscriber.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWorkflowNotifyEvent", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterWorkflowNotifyEvent indicates an expected call of RegisterWorkflowNotifyEvent.
func (mr *MocktemporalAdapterMockRecorder) RegisterWorkflowNotifyEvent(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWorkflowNotifyEvent", reflect.TypeOf((*MocktemporalAdapter)(nil).RegisterWorkflowNotifyEvent), ctx, e)
}
